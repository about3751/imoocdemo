<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 本配置文件是工名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required
        @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
    <context:annotation-config />

    <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
    <context:component-scan base-package="com.lc">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
    <mvc:annotation-driven />

    <!-- 静态资源处理， css， js， imgs -->
     <mvc:resources mapping="/js/**" location="classpath:/js" />


    <!-- SpringMVC Begin -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>


    <!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="resolveLazily" value="true" />
    </bean>

    <!-- SpringMVC end -->

    <!-- MyBatis Start -->
        <!-- 引入配置jdbc文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <!-- 配置数据源 -->
        <bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">

            <property name="driverClassName" value="${driver}"></property>
            <property name="url" value="${url}"></property>
            <property name="username" value="${username}"></property>
            <property name="password" value="${password}"></property>

        </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>


        <property name="dataSource" ref="basicDataSource" />
        <!-- 自动扫描mapping.xml文件 -->
    </bean>


    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lc.dao.**" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          id="dataSourceTransactionManager">
        <property name="dataSource" ref="basicDataSource"></property>
    </bean>

    <tx:advice transaction-manager="dataSourceTransactionManager" id="transactionInterceptor">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="10"/>
            <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="10"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="10"/>
            <tx:method name="remove*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="10"/>
            <tx:method name="modify*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="10"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="10"/>
        </tx:attributes>
    </tx:advice>


    <!-- AOP Start -->
    <aop:config>
        <aop:aspect id="aop" ref="bookServiceAop">
            <!-- 切入点 -->
            <aop:pointcut id="bookPointcut" expression="execution(* com.lc.service..*(..))"/>
            <aop:before method="doSomthing" pointcut-ref="bookPointcut"></aop:before>
            <aop:after-returning method="doReturning" pointcut-ref="bookPointcut"></aop:after-returning>
            <aop:after-throwing method="doThrowing" pointcut-ref="bookPointcut"></aop:after-throwing>
            <aop:after method="doAfter" pointcut-ref="bookPointcut"></aop:after>
            <aop:around method="doAround" pointcut-ref="bookPointcut"></aop:around>

        </aop:aspect>

    </aop:config>

    <aop:config expose-proxy="true">
        <aop:pointcut id="daoPoint" expression="execution(* com.lc.dao..*(..))"/>
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="daoPoint"></aop:advisor>
    </aop:config>

    <!-- AOP End -->

</beans>